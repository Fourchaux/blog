Hello from /Users/xvw/.atom/packages/ide-reason/rls/rls-darwin-1.0.0-beta.7.exe
Previous log location: /var/folders/w3/g31_6cy92870v8b_3q423mvh0000gn/T/lsp.log
Sending notification {"jsonrpc": "2.0", "method": "client/registerCapability", "params": {"registrations": [{"id": "watching", "method": "workspace/didChangeWatchedFiles", "registerOptions": {"watchers": [{"globPattern": "**/bsconfig.json", "globPattern": "**/.merlin"}]}}]}}
Sending response {"id": 0, "jsonrpc": "2.0", "result": {"capabilities": {"textDocumentSync": 1, "hoverProvider": true, "completionProvider": {"resolveProvider": true, "triggerCharacters": ["."]}, "signatureHelpProvider": {"triggerCharacters": ["("]}, "definitionProvider": true, "typeDefinitionProvider": true, "referencesProvider": true, "documentSymbolProvider": true, "codeLensProvider": {"resolveProvider": true}, "documentHighlightProvider": true, "renameProvider": true, "documentRangeFormattingProvider": true, "documentFormattingProvider": true, "documentFormattingProvider": true, "renameProvider": true}}}
Read message 
{"jsonrpc":"2.0","method":"initialized","params":{}}
Read message 
{"jsonrpc":"2.0","method":"workspace/didChangeConfiguration","params":{"settings":{"refmt":"refmt","lispRefmt":"lispRefmt","format_width":80,"per_value_codelens":false,"dependencies_codelens":false,"opens_codelens":false}}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didOpen","params":{"textDocument":{"uri":"file:///Users/xvw/Programmation/blog/playground/monad.ml","languageId":"ocaml","version":1,"text":"module type BINDABLE =\nsig\n  type 'a t\n  val pure  : 'a -> 'a t\n  val (>>=) : 'a t -> ('a -> 'b t)  -> 'b t\nend\n\nmodule type JOINABLE =\nsig\n  type 'a t\n  val pure : 'a -> 'a t\n  val map  : ('a -> 'b) -> 'a t -> 'b t\n  val join : ('a t) t -> 'a t\nend\n\nmodule type MONAD =\nsig\n  type 'a t\n  val pure  : 'a -> 'a t\n  val map   : ('a -> 'b) -> 'a t -> 'b t\n  val join  : ('a t) t -> 'a t\n  val (>>=) : 'a t -> ('a -> 'b t)  -> 'b t\nend\n\nmodule With_bind (M : BINDABLE) :\n  MONAD with type 'a t = 'a M.t =\nstruct\n  include M\n  let join x  = x >>= (fun x -> x)\n  let map f x = x >>= (fun x -> pure (f x))\nend\n\nmodule With_join (M : JOINABLE) :\n  MONAD with type 'a t = 'a M.t =\nstruct\n  include M\n  let (>>=) x f = join (map f x)\nend\n\nmodule OptionM = With_bind(\n  struct\n    type 'a t = 'a option\n    let pure x = Some x\n    let (>>=) x f = match x with\n      | Some a -> f a\n      | None -> None\n  end)\n\nmodule ListM = With_join(\n  struct\n    type 'a t = 'a list\n    let pure x = [x]\n    let map = List.map\n    let join = List.flatten\n  end)\n"}}}
Read message 
{"jsonrpc":"2.0","method":"workspace/didChangeWatchedFiles","params":{"changes":[{"uri":"file:///Users/xvw/Programmation/blog/node_modules/.lsp/debug.log","type":2},{"uri":"file:///Users/xvw/Programmation/blog/_cache/74ad07f6399cddcf5e93a42176e6ff4a","type":2},{"uri":"file:///Users/xvw/Programmation/blog/_cache/d5c19886a5497f571c624d44ba520d2b","type":2}]}}
Got a watched file change
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/xvw/Programmation/blog/playground/monad.ml","version":2},"contentChanges":[{"text":"module type BINDABLE =\nsig\n  type 'a t\n  val pure  : 'a -> 'a t\n  val (>>=) : 'a t -> ('a -> 'b t)  -> 'b t\nend\n\nmodule type JOINABLE =\nsig\n  type 'a t\n  val pure : 'a -> 'a t\n  val map  : ('a -> 'b) -> 'a t -> 'b t\n  val join : ('a t) t -> 'a t\nend\n\nmodule type MONAD =\nsig\n  type 'a t\n  val pure  : 'a -> 'a t\n  val map   : ('a -> 'b) -> 'a t -> 'b t\n  val join  : ('a t) t -> 'a t\n  val (>>=) : 'a t -> ('a -> 'b t)  -> 'b t\nend\n\nmodule With_bind (M : BINDABLE) :\n  MONAD with type 'a t = 'a M.t =\nstruct\n  include M\n  let join x  = x >>= (fun x -> x)\n  let map f x = x >>= (fun x -> pure (f x))\nend\n\nmodule With_join (M : JOINABLE) :\n  MONAD with type 'a t = 'a M.t =\nstruct\n  include M\n  let (>>=) x f = join (map f x)\nend\n\nmodule OptionM = With_bind(\n  struct\n    type 'a t = 'a option\n    let pure x = Some x\n    let (>>=) x f = match x with\n      | Some a -> f a\n      | None -> None\n  end)\n\n\nmodule ListM = With_join(\n  struct\n    type 'a t = 'a list\n    let pure x = [x]\n    let map = List.map\n    let join = List.flatten\n  end)\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/xvw/Programmation/blog/playground/monad.ml","version":3},"contentChanges":[{"text":"module type BINDABLE =\nsig\n  type 'a t\n  val pure  : 'a -> 'a t\n  val (>>=) : 'a t -> ('a -> 'b t)  -> 'b t\nend\n\nmodule type JOINABLE =\nsig\n  type 'a t\n  val pure : 'a -> 'a t\n  val map  : ('a -> 'b) -> 'a t -> 'b t\n  val join : ('a t) t -> 'a t\nend\n\nmodule type MONAD =\nsig\n  type 'a t\n  val pure  : 'a -> 'a t\n  val map   : ('a -> 'b) -> 'a t -> 'b t\n  val join  : ('a t) t -> 'a t\n  val (>>=) : 'a t -> ('a -> 'b t)  -> 'b t\nend\n\nmodule With_bind (M : BINDABLE) :\n  MONAD with type 'a t = 'a M.t =\nstruct\n  include M\n  let join x  = x >>= (fun x -> x)\n  let map f x = x >>= (fun x -> pure (f x))\nend\n\nmodule With_join (M : JOINABLE) :\n  MONAD with type 'a t = 'a M.t =\nstruct\n  include M\n  let (>>=) x f = join (map f x)\nend\n\nmodule OptionM = With_bind(\n  struct\n    type 'a t = 'a option\n    let pure x = Some x\n    let (>>=) x f = match x with\n      | Some a -> f a\n      | None -> None\n  end)\n\n\nmodule ListM = With_join(\n  struct\n    type 'a t = 'a list\n    let pure x = [x]\n    let map = List.map\n    let join = List.flatten\n  end)\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///Users/xvw/Programmation/blog/playground/monad.ml","version":1}}}
Sending notification {"jsonrpc": "2.0", "method": "window/showMessage", "params": {"type": 1, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"workspace/didChangeWatchedFiles","params":{"changes":[{"uri":"file:///Users/xvw/Programmation/blog/playground/monad.ml","type":2},{"uri":"file:///Users/xvw/Programmation/blog/_cache/74ad07f6399cddcf5e93a42176e6ff4a","type":2},{"uri":"file:///Users/xvw/Programmation/blog/_cache/d5c19886a5497f571c624d44ba520d2b","type":2}]}}
Got a watched file change
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/xvw/Programmation/blog/playground/monad.ml","version":4},"contentChanges":[{"text":"module type BINDABLE =\nsig\n  type 'a t\n  val pure  : 'a -> 'a t\n  val (>>=) : 'a t -> ('a -> 'b t)  -> 'b t\nend\n\nmodule type JOINABLE =\nsig\n  type 'a t\n  val pure : 'a -> 'a t\n  val map  : ('a -> 'b) -> 'a t -> 'b t\n  val join : ('a t) t -> 'a t\nend\n\nmodule type MONAD =\nsig\n  type 'a t\n  val pure  : 'a -> 'a t\n  val map   : ('a -> 'b) -> 'a t -> 'b t\n  val join  : ('a t) t -> 'a t\n  val (>>=) : 'a t -> ('a -> 'b t)  -> 'b t\nend\n\nmodule With_bind (M : BINDABLE) :\n  MONAD with type 'a t = 'a M.t =\nstruct\n  include M\n  let join x  = x >>= (fun x -> x)\n  let map f x = x >>= (fun x -> pure (f x))\nend\n\nmodule With_join (M : JOINABLE) :\n  MONAD with type 'a t = 'a M.t =\nstruct\n  include M\n  let (>>=) x f = join (map f x)\nend\n\nmodule OptionM = With_bind(\n  struct\n    type 'a t = 'a option\n    let pure x = Some x\n    let (>>=) x f = match x with\n      | Some a -> f a\n      | None -> None\n  end)\n\nmodule ListM = With_join(\n  struct\n    type 'a t = 'a list\n    let pure x = [x]\n    let map = List.map\n    let join = List.flatten\n  end)\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/xvw/Programmation/blog/playground/monad.ml","version":5},"contentChanges":[{"text":"module type BINDABLE =\nsig\n  type 'a t\n  val pure  : 'a -> 'a t\n  val (>>=) : 'a t -> ('a -> 'b t)  -> 'b t\nend\n\nmodule type JOINABLE =\nsig\n  type 'a t\n  val pure : 'a -> 'a t\n  val map  : ('a -> 'b) -> 'a t -> 'b t\n  val join : ('a t) t -> 'a t\nend\n\nmodule type MONAD =\nsig\n  type 'a t\n  val pure  : 'a -> 'a t\n  val map   : ('a -> 'b) -> 'a t -> 'b t\n  val join  : ('a t) t -> 'a t\n  val (>>=) : 'a t -> ('a -> 'b t)  -> 'b t\nend\n\nmodule With_bind (M : BINDABLE) :\n  MONAD with type 'a t = 'a M.t =\nstruct\n  include M\n  let join x  = x >>= (fun x -> x)\n  let map f x = x >>= (fun x -> pure (f x))\nend\n\nmodule With_join (M : JOINABLE) :\n  MONAD with type 'a t = 'a M.t =\nstruct\n  include M\n  let (>>=) x f = join (map f x)\nend\n\nmodule OptionM = With_bind(\n  struct\n    type 'a t = 'a option\n    let pure x = Some x\n    let (>>=) x f = match x with\n      | Some a -> f a\n      | None -> None\n  end)\n\n\nmodule ListM = With_join(\n  struct\n    type 'a t = 'a list\n    let pure x = [x]\n    let map = List.map\n    let join = List.flatten\n  end)\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/xvw/Programmation/blog/playground/monad.ml","version":6},"contentChanges":[{"text":"module type BINDABLE =\nsig\n  type 'a t\n  val pure  : 'a -> 'a t\n  val (>>=) : 'a t -> ('a -> 'b t)  -> 'b t\nend\n\nmodule type JOINABLE =\nsig\n  type 'a t\n  val pure : 'a -> 'a t\n  val map  : ('a -> 'b) -> 'a t -> 'b t\n  val join : ('a t) t -> 'a t\nend\n\nmodule type MONAD =\nsig\n  type 'a t\n  val pure  : 'a -> 'a t\n  val map   : ('a -> 'b) -> 'a t -> 'b t\n  val join  : ('a t) t -> 'a t\n  val (>>=) : 'a t -> ('a -> 'b t)  -> 'b t\nend\n\nmodule With_bind (M : BINDABLE) :\n  MONAD with type 'a t = 'a M.t =\nstruct\n  include M\n  let join x  = x >>= (fun x -> x)\n  let map f x = x >>= (fun x -> pure (f x))\nend\n\nmodule With_join (M : JOINABLE) :\n  MONAD with type 'a t = 'a M.t =\nstruct\n  include M\n  let (>>=) x f = join (map f x)\nend\n\nmodule OptionM = With_bind(\n  struct\n    type 'a t = 'a option\n    let pure x = Some x\n    let (>>=) x f = match x with\n      | Some a -> f a\n      | None -> None\n  end)\n\n\nmodule ListM = With_join(\n  struct\n    type 'a t = 'a list\n    let pure x = [x]\n    let map = List.map\n    let join = List.flatten\n  end)\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/xvw/Programmation/blog/playground/monad.ml","version":7},"contentChanges":[{"text":"module type BINDABLE =\nsig\n  type 'a t\n  val pure  : 'a -> 'a t\n  val (>>=) : 'a t -> ('a -> 'b t)  -> 'b t\nend\n\nmodule type JOINABLE =\nsig\n  type 'a t\n  val pure : 'a -> 'a t\n  val map  : ('a -> 'b) -> 'a t -> 'b t\n  val join : ('a t) t -> 'a t\nend\n\nmodule type MONAD =\nsig\n  type 'a t\n  val pure  : 'a -> 'a t\n  val map   : ('a -> 'b) -> 'a t -> 'b t\n  val join  : ('a t) t -> 'a t\n  val (>>=) : 'a t -> ('a -> 'b t)  -> 'b t\nend\n\nmodule With_bind (M : BINDABLE) :\n  MONAD with type 'a t = 'a M.t =\nstruct\n  include M\n  let join x  = x >>= (fun x -> x)\n  let map f x = x >>= (fun x -> pure (f x))\nend\n\nmodule With_join (M : JOINABLE) :\n  MONAD with type 'a t = 'a M.t =\nstruct\n  include M\n  let (>>=) x f = join (map f x)\nend\n\nmodule OptionM = With_bind(\n  struct\n    type 'a t = 'a option\n    let pure x = Some x\n    let (>>=) x f = match x with\n      | Some a -> f a\n      | None -> None\n  end)\ns\n\nmodule ListM = With_join(\n  struct\n    type 'a t = 'a list\n    let pure x = [x]\n    let map = List.map\n    let join = List.flatten\n  end)\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/xvw/Programmation/blog/playground/monad.ml","version":8},"contentChanges":[{"text":"module type BINDABLE =\nsig\n  type 'a t\n  val pure  : 'a -> 'a t\n  val (>>=) : 'a t -> ('a -> 'b t)  -> 'b t\nend\n\nmodule type JOINABLE =\nsig\n  type 'a t\n  val pure : 'a -> 'a t\n  val map  : ('a -> 'b) -> 'a t -> 'b t\n  val join : ('a t) t -> 'a t\nend\n\nmodule type MONAD =\nsig\n  type 'a t\n  val pure  : 'a -> 'a t\n  val map   : ('a -> 'b) -> 'a t -> 'b t\n  val join  : ('a t) t -> 'a t\n  val (>>=) : 'a t -> ('a -> 'b t)  -> 'b t\nend\n\nmodule With_bind (M : BINDABLE) :\n  MONAD with type 'a t = 'a M.t =\nstruct\n  include M\n  let join x  = x >>= (fun x -> x)\n  let map f x = x >>= (fun x -> pure (f x))\nend\n\nmodule With_join (M : JOINABLE) :\n  MONAD with type 'a t = 'a M.t =\nstruct\n  include M\n  let (>>=) x f = join (map f x)\nend\n\nmodule OptionM = With_bind(\n  struct\n    type 'a t = 'a option\n    let pure x = Some x\n    let (>>=) x f = match x with\n      | Some a -> f a\n      | None -> None\n  end)\n\n\nmodule ListM = With_join(\n  struct\n    type 'a t = 'a list\n    let pure x = [x]\n    let map = List.map\n    let join = List.flatten\n  end)\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///Users/xvw/Programmation/blog/playground/monad.ml","version":1}}}
Sending notification {"jsonrpc": "2.0", "method": "window/showMessage", "params": {"type": 1, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"workspace/didChangeWatchedFiles","params":{"changes":[{"uri":"file:///Users/xvw/Programmation/blog/playground/monad.ml","type":2}]}}
Got a watched file change
Read message 
{"jsonrpc":"2.0","method":"workspace/didChangeWatchedFiles","params":{"changes":[{"uri":"file:///Users/xvw/Programmation/blog/_cache/74ad07f6399cddcf5e93a42176e6ff4a","type":2},{"uri":"file:///Users/xvw/Programmation/blog/_cache/d5c19886a5497f571c624d44ba520d2b","type":2}]}}
Got a watched file change
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/xvw/Programmation/blog/playground/monad.ml","version":9},"contentChanges":[{"text":"module type BINDABLE =\nsig\n  type 'a t\n  val pure  : 'a -> 'a t\n  val (>>=) : 'a t -> ('a -> 'b t)  -> 'b t\nend\n\nmodule type JOINABLE =\nsig\n  type 'a t\n  val pure : 'a -> 'a t\n  val map  : ('a -> 'b) -> 'a t -> 'b t\n  val join : ('a t) t -> 'a t\nend\n\nmodule type MONAD =\nsig\n  type 'a t\n  val pure  : 'a -> 'a t\n  val map   : ('a -> 'b) -> 'a t -> 'b t\n  val join  : ('a t) t -> 'a t\n  val (>>=) : 'a t -> ('a -> 'b t)  -> 'b t\nend\n\nmodule With_bind (M : BINDABLE) :\n  MONAD with type 'a t = 'a M.t =\nstruct\n  include M\n  let join x  = x >>= (fun x -> x)\n  let map f x = x >>= (fun x -> pure (f x))\nend\n\nmodule With_join (M : JOINABLE) :\n  MONAD with type 'a t = 'a M.t =\nstruct\n  include M\n  let (>>=) x f = join (map f x)\nend\n\nmodule OptionM = With_bind(\n  struct\n    type 'a t = 'a option\n    let pure x = Some x\n    let (>>=) x f = match x with\n      | Some a -> f a\n      | None -> None\n  end)\n\nmodule ListM = With_join(\n  struct\n    type 'a t = 'a list\n    let pure x = [x]\n    let map = List.map\n    let join = List.flatten\n  end)\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/xvw/Programmation/blog/playground/monad.ml","version":10},"contentChanges":[{"text":"module type BINDABLE =\nsig\n  type 'a t\n  val pure  : 'a -> 'a t\n  val (>>=) : 'a t -> ('a -> 'b t)  -> 'b t\nend\n\nmodule type JOINABLE =\nsig\n  type 'a t\n  val pure : 'a -> 'a t\n  val map  : ('a -> 'b) -> 'a t -> 'b t\n  val join : ('a t) t -> 'a t\nend\n\nmodule type MONAD =\nsig\n  type 'a t\n  val pure  : 'a -> 'a t\n  val map   : ('a -> 'b) -> 'a t -> 'b t\n  val join  : ('a t) t -> 'a t\n  val (>>=) : 'a t -> ('a -> 'b t)  -> 'b t\nend\n\nmodule With_bind (M : BINDABLE) :\n  MONAD with type 'a t = 'a M.t =\nstruct\n  include M\n  let join x  = x >>= (fun x -> x)\n  let map f x = x >>= (fun x -> pure (f x))\nend\n\nmodule With_join (M : JOINABLE) :\n  MONAD with type 'a t = 'a M.t =\nstruct\n  include M\n  let (>>=) x f = join (map f x)\nend\n\nmodule OptionM = With_bind(\n  struct\n    type 'a t = 'a option\n    let pure x = Some x\n    let (>>=) x f = match x with\n      | Some a -> f a\n      | None -> None\n  end)\n\n\nmodule ListM = With_join(\n  struct\n    type 'a t = 'a list\n    let pure x = [x]\n    let map = List.map\n    let join = List.flatten\n  end)\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/xvw/Programmation/blog/playground/monad.ml","version":11},"contentChanges":[{"text":"module type BINDABLE =\nsig\n  type 'a t\n  val pure  : 'a -> 'a t\n  val (>>=) : 'a t -> ('a -> 'b t)  -> 'b t\nend\n\nmodule type JOINABLE =\nsig\n  type 'a t\n  val pure : 'a -> 'a t\n  val map  : ('a -> 'b) -> 'a t -> 'b t\n  val join : ('a t) t -> 'a t\nend\n\nmodule type MONAD =\nsig\n  type 'a t\n  val pure  : 'a -> 'a t\n  val map   : ('a -> 'b) -> 'a t -> 'b t\n  val join  : ('a t) t -> 'a t\n  val (>>=) : 'a t -> ('a -> 'b t)  -> 'b t\nend\n\nmodule With_bind (M : BINDABLE) :\n  MONAD with type 'a t = 'a M.t =\nstruct\n  include M\n  let join x  = x >>= (fun x -> x)\n  let map f x = x >>= (fun x -> pure (f x))\nend\n\nmodule With_join (M : JOINABLE) :\n  MONAD with type 'a t = 'a M.t =\nstruct\n  include M\n  let (>>=) x f = join (map f x)\nend\n\nmodule OptionM = With_bind(\n  struct\n    type 'a t = 'a option\n    let pure x = Some x\n    let (>>=) x f = match x with\n      | Some a -> f a\n      | None -> None\n  end)\n\n\nmodule ListM = With_join(\n  struct\n    type 'a t = 'a list\n    let pure x = [x]\n    let map = List.map\n    let join = List.flatten\n  end)\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///Users/xvw/Programmation/blog/playground/monad.ml","version":1}}}
Sending notification {"jsonrpc": "2.0", "method": "window/showMessage", "params": {"type": 1, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"workspace/didChangeWatchedFiles","params":{"changes":[{"uri":"file:///Users/xvw/Programmation/blog/playground/monad.ml","type":2},{"uri":"file:///Users/xvw/Programmation/blog/_cache/74ad07f6399cddcf5e93a42176e6ff4a","type":2},{"uri":"file:///Users/xvw/Programmation/blog/_cache/d5c19886a5497f571c624d44ba520d2b","type":2}]}}
Got a watched file change
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/xvw/Programmation/blog/playground/monad.ml","version":12},"contentChanges":[{"text":"module type BINDABLE =\nsig\n  type 'a t\n  val pure  : 'a -> 'a t\n  val (>>=) : 'a t -> ('a -> 'b t)  -> 'b t\nend\n\nmodule type JOINABLE =\nsig\n  type 'a t\n  val pure : 'a -> 'a t\n  val map  : ('a -> 'b) -> 'a t -> 'b t\n  val join : ('a t) t -> 'a t\nend\n\nmodule type MONAD =\nsig\n  type 'a t\n  val pure  : 'a -> 'a t\n  val map   : ('a -> 'b) -> 'a t -> 'b t\n  val join  : ('a t) t -> 'a t\n  val (>>=) : 'a t -> ('a -> 'b t)  -> 'b t\nend\n\nmodule With_bind (M : BINDABLE) :\n  MONAD with type 'a t = 'a M.t =\nstruct\n  include M\n  let join x  = x >>= (fun x -> x)\n  let map f x = x >>= (fun x -> pure (f x))\nend\n\nmodule With_join (M : JOINABLE) :\n  MONAD with type 'a t = 'a M.t =\nstruct\n  include M\n  let (>>=) x f = join (map f x)\nend\n\nmodule OptionM = With_bind(\n  struct\n    type 'a t = 'a option\n    let pure x = Some x\n    let (>>=) x f = match x with\n      | Some a -> f a\n      | None -> None\n  end)\n\nmodule ListM = With_join(\n  struct\n    type 'a t = 'a list\n    let pure x = [x]\n    let map = List.map\n    let join = List.flatten\n  end)\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///Users/xvw/Programmation/blog/playground/monad.ml","version":1}}}
Sending notification {"jsonrpc": "2.0", "method": "window/showMessage", "params": {"type": 1, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"workspace/didChangeWatchedFiles","params":{"changes":[{"uri":"file:///Users/xvw/Programmation/blog/playground/monad.ml","type":2},{"uri":"file:///Users/xvw/Programmation/blog/_cache/74ad07f6399cddcf5e93a42176e6ff4a","type":2},{"uri":"file:///Users/xvw/Programmation/blog/_cache/d5c19886a5497f571c624d44ba520d2b","type":2}]}}
Got a watched file change
Read message 
{"jsonrpc":"2.0","id":1,"method":"textDocument/definition","params":{"textDocument":{"uri":"file:///Users/xvw/Programmation/blog/playground/monad.ml"},"position":{"line":28,"character":2}}}
Got a method textDocument/definition
Sending response {"id": 1, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":2,"method":"shutdown","params":null}
Got a method shutdown
Sending response {"id": 2, "jsonrpc": "2.0", "error": {"code": -32601, "message": "Unexpected method: shutdown"}}
